package com.borqs.qiupu.ui;

import java.util.ArrayList;
import java.util.List;

import twitter4j.AsyncQiupu;
import twitter4j.ErrorResponse;
import twitter4j.TwitterAdapter;
import twitter4j.TwitterException;
import twitter4j.TwitterMethod;
import twitter4j.UserSession;
import twitter4j.conf.ConfigurationContext;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

import com.borqs.qiupu.QiupuConfig;
import com.borqs.qiupu.R;
import com.borqs.qiupu.UserAccountObserver;
import com.borqs.qiupu.db.QiupuORM;
import com.borqs.qiupu.ui.adapter.UserMailListAdapter;
import com.borqs.qiupu.util.StringUtil;


public class LoginActivity extends Activity implements TextWatcher{
	private static final String TAG = "Qiupu.LoginActivity";
    private AutoCompleteTextView login_username_edt;
    private EditText login_pwd_edt;
    private Button   login_ok_btn;
    private TextView sign_up_txv;
    private TextView get_password;
    private TextView error_msg_txv;
    private ImageView mImageView;
    private ListView mListView;
    private AsyncQiupu asyncQiupu;
    private Handler mHandler;
    private QiupuORM.Account mAccount; 
    private QiupuORM orm;    
    private ArrayAdapter<String> adapter;  
    private ArrayList<String> UserMail = new ArrayList<String>();
    private UserMailListAdapter mUserMailListAdapter;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.login);
		
		asyncQiupu = new AsyncQiupu(ConfigurationContext.getInstance(),null,null);
		orm = QiupuORM.getInstance(getApplicationContext());
		
		login_username_edt = (AutoCompleteTextView)findViewById(R.id.login_username_edt);
		login_pwd_edt      = (EditText)findViewById(R.id.login_pwd_edt);
		login_ok_btn       = (Button)findViewById(R.id.login_ok_btn);
		sign_up_txv        = (TextView)findViewById(R.id.sign_up_txv);
		get_password       = (TextView) findViewById(R.id.get_password);
		error_msg_txv      = (TextView)findViewById(R.id.error_msg_txv);
		mImageView         = (ImageView) findViewById(R.id.login_list_mail);
		mListView          = (ListView)findViewById(R.id.login_mail_content);

		mUserMailListAdapter = new UserMailListAdapter(this);
		mListView.setAdapter(mUserMailListAdapter);
		
		login_username_edt.addTextChangedListener(this);
		
		login_ok_btn.setOnClickListener(loginListener);
		sign_up_txv.setOnClickListener(signUpListener);
		mImageView.setOnClickListener(new ListMailBtnClickListener());
		mListView.setOnItemClickListener(new ListMailItemClickListener());
		get_password.setOnClickListener(getpasswordListener);
		mHandler = new LoginHandler();
		initTextView();
//		getGmailAccount();
	}
	
//	private void initTextView() {
//		mAccount = orm.getAccount();
//		if(mAccount != null)
//		{
//			if(!StringUtil.isEmpty(mAccount.email))
//			{
//				login_username_edt.setText(mAccount.email);
//			}
//		}		
//	}
	
	private void initTextView() {
		String accountEmail = orm.getSettingValue("last_login_user");
		if(accountEmail != null)
		{
				login_username_edt.setText(accountEmail);
				UserMail.add(accountEmail);
		}
	}
	
	View.OnClickListener loginListener = new View.OnClickListener() {
		
		public void onClick(View v) {
			String username = login_username_edt.getText().toString();
			String pwd      = login_pwd_edt.getText().toString();
			error_msg_txv.setText(""); //clear error_msg_txv
			if(!StringUtil.isEmpty(username) && !StringUtil.isEmpty(pwd))
            {
				login_ok_btn.setEnabled(false);
				//remember username to db
                Message message = mHandler.obtainMessage(VERIFY_USER);
                message.getData().putString(USERNAME_KEY, username);
                message.getData().putString(PWD_KEY, pwd);
                message.sendToTarget();
            }
			
		}
	};
	
	View.OnClickListener signUpListener = new View.OnClickListener() {
		public void onClick(View v) {
			  Intent intent = new Intent(LoginActivity.this.getApplication(),RegisterActivity.class);
			  Bundle bundle = new Bundle();
			  bundle.putStringArrayList("UserMail", UserMail);
			  intent.putExtras(bundle);
	          startActivity(intent);
	          LoginActivity.this.finish();
		}
	};
	
	private void getPassword(){
		String str = login_username_edt.getText().toString().trim();
		if(str !=null && str.length() > 0){
			asyncQiupu.getUserPasswrod(str, new TwitterAdapter(){
                
				public void getUserpassword(boolean result) {
                	if(result){
                		Log.d(TAG, "result :"+ result);
                		Message msg = mHandler.obtainMessage(GET_PASSWORD_OK);
                		msg.sendToTarget();
                	}
				}
                public void onException(TwitterException ex,TwitterMethod method) {
                	Log.d(TAG, "getpassword exception "+ex.getMessage()+"==method="+method.name());
					Message msg = mHandler.obtainMessage(GET_PASSWORD_FAILED);
					msg.sendToTarget();
                }
	    	    
	    	});
		}
	}
	
	View.OnClickListener getpasswordListener = new View.OnClickListener() {
		public void onClick(View v) {
			String str = login_username_edt.getText().toString().trim();
			if(str != null && str.length()>0){
				showDialog(DIALOG_GETPASSWORD);
			}
			else{
				Toast.makeText(LoginActivity.this, R.string.toast_input_email, Toast.LENGTH_LONG).show();
			}
		}
	};
	
	protected void onPause() {
		super.onPause();
	}

	
	protected void onResume() {
		super.onResume();
	}
	
	
	protected void onDestroy() {
		super.onDestroy();		
	}
	
	
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK) 
		{         
        	Log.d(TAG, "KEYCODE_BACK coming");     
	    }
		return super.onKeyDown(keyCode, event);
		
	}
	
	private final String USERNAME_KEY          = "username";
	private final String PWD_KEY               = "pwd";
	private final String IS_LOGIN_SUCCESS_KEY  = "is_login_success";
	private final String ERROR_CODE_KEY        = "error_code";

	private final int VERIFY_USER         = 1;
    private final int VERIFY_USER_END     = 2;
    private final int GET_PASSWORD_OK     = 3;
    private final int GET_PASSWORD_FAILED = 4;
	private class LoginHandler extends Handler{
	    public void handleMessage(Message msg) {
	    	switch(msg.what){
	    	    case VERIFY_USER:{
	    	    	final String username = msg.getData().getString(USERNAME_KEY);
	    	    	final String pwd      = msg.getData().getString(PWD_KEY);
	    	    	asyncQiupu.loginBorqs(username, pwd, new TwitterAdapter(){
                        
                        @Override
						public void loginBorqs(UserSession loginBorqs) {
							if(loginBorqs != null){
								//login successfully
								QiupuORM.Account account = new QiupuORM.Account();
								account.email = username;
								account.pwd = pwd;
								account.session_id = loginBorqs.session_id;
								account.uid = loginBorqs.uid;
								account.urlname = loginBorqs.urlname;
								Message msg = mHandler.obtainMessage(VERIFY_USER_END);
								try{
									orm.updateAccount(account);
		                            msg.getData().putBoolean(IS_LOGIN_SUCCESS_KEY, true);
		                            startCollectPhoneInfo();
								}catch(Exception e){
									msg.getData().putBoolean(IS_LOGIN_SUCCESS_KEY, false);
								}
							
	                            msg.sendToTarget();
							}
						}

						@Override
                        public void onException(TwitterException ex,TwitterMethod method) {
                            Log.d(TAG, "login exception "+ex.getMessage()+"==method="+method.name());
                            Message msg = mHandler.obtainMessage(VERIFY_USER_END);
                            msg.getData().putBoolean(IS_LOGIN_SUCCESS_KEY, false);
                            int error_code = ex.getStatusCode();
                            msg.getData().putInt(ERROR_CODE_KEY, error_code);
                            msg.sendToTarget();
                        }
	    	    	    
	    	    	});
	    		    break;
	    	    }
	    	    case VERIFY_USER_END:{
	    	    	boolean is_login_success = msg.getData().getBoolean(IS_LOGIN_SUCCESS_KEY);
	    	    	Log.d(TAG,"verify user end login success:"+is_login_success);
	    	    	
	    	    	login_ok_btn.setEnabled(true);
	    	    	if(is_login_success)
	    	    	{
	    	    		//LoginActivity.this.finish();	
	    	    		String last_login_name = orm.getSettingValue(QiupuORM.LAST_LOGIN_USER);
	    	    		String current_login_name = orm.getAccount().email;    
	    	    		Log.d(TAG, "current_login_name :"+ current_login_name);
	    	    		if(last_login_name == null || (!StringUtil.isEmpty(current_login_name))){
	    	    			orm.setLastLoginUser(orm.getAccount().email);
	    	    			orm.deleteApkinfo();
	    	    		}
	    	    		
	    	    		UserAccountObserver.login();
	    	    		LoginActivity.this.setResult(Activity.RESULT_OK);
	    	    		LoginActivity.this.finish();
	    	    	}
	    	    	
	    	    	else
	    	    	{
	    	    		int error_code = msg.getData().getInt(ERROR_CODE_KEY);
	    	    		if(error_code == ErrorResponse.NOT_VERIFY)
	    	    		{
	    	    			//got to verify 
	    	    			Intent intent = new Intent(LoginActivity.this.getApplicationContext(),RegisterActivity.class);
	    	    			intent.putExtra("step", 2);
	    	    			String username = login_username_edt.getText().toString();
	    	    			String pwd      = login_pwd_edt.getText().toString();
	    	    			intent.putExtra("username",username);
	    	    			intent.putExtra("password", pwd);
	    	    			startActivity(intent);    	    			
	    	    		}
	    	    		else
	    	    		{
		    	    		error_msg_txv.setText(R.string.login_error_msg);
	    	    		}
	    	    	}
	    	    	break;
	    	    }
	    	    case GET_PASSWORD_OK:
	    	    {
	    	    	Toast.makeText(LoginActivity.this, R.string.toast_get_password_success, Toast.LENGTH_LONG).show();
	    	    	break;
	    	    }
	    	    case GET_PASSWORD_FAILED:
	    	    {
	    	    	Toast.makeText(LoginActivity.this, R.string.toast_get_password_failed, Toast.LENGTH_LONG).show();
	    	    	break;
	    	    }
	    	    
	    	}
	    }
		
	}
	
	private class ListMailBtnClickListener implements OnClickListener{

		public void onClick(View arg0) {
			
			if(mListView.getVisibility() == View.GONE){
				mListView.setVisibility(View.VISIBLE);
			}else{
				mListView.setVisibility(View.GONE);
			}
			if(UserMail.size() > 0){
				mUserMailListAdapter.setItems(UserMail);
				mUserMailListAdapter.notifyDataSetChanged();
			}
		}
	}

	private class ListMailItemClickListener implements OnItemClickListener{

		public void onItemClick(AdapterView<?> arg0, View view, int position,long arg3) {
			login_username_edt.setText(UserMail.get(position).toString());
			mListView.setVisibility(View.GONE);
			
		}
	}
	
//	private void getMailAccountFromPhone(){
//		Cursor cursor = this.getContentResolver().query(Uri.parse("content://com.android.email.provider/account"),
//		                    new String[] {"emailAddress"}, null, null, null);
//		       
//        if (null != cursor && cursor.moveToFirst()) {
//            for (int i = 0; i < cursor.getCount(); i++) {
//                String addr = cursor.getString(cursor.getColumnIndexOrThrow("emailAddress"));
//                UserMail.add(addr);
//                cursor.moveToNext();
//            }
//        }
//		
//	}
	private void getGmailAccount(){
//		Cursor cursor = this.getContentResolver().query(Uri.parse("content://gmail-ls/preferences"),
//				 new String[] {"user_name","first_time"}, null, null, null);
		Cursor cursor = this.getContentResolver().query(Uri.parse("content://gmail-ls/labels"),
				null, null, null, null);
		
		if (null != cursor && cursor.moveToFirst()) {
			for (int i = 0; i < cursor.getCount(); i++) {
				String addr = cursor.getString(cursor.getColumnIndexOrThrow("user_name"));
				Log.d(TAG, "user_name : "+ addr);
				UserMail.add(addr);
				cursor.moveToNext();
			}
		}
	}
	
	public static final int RESULT_EXIT = 10;
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		if(mListView.getVisibility()==View.VISIBLE){
			mListView.setVisibility(View.GONE);
		}
		return super.onTouchEvent(event);
	}

	@Override
	public void onBackPressed() {
		setResult(RESULT_EXIT);
		finish();
	}
	
	protected void startCollectPhoneInfo(){
		Intent intent = new Intent();
		intent.setAction(IntentUtil.ACTION_COLLECT_PHONE_INFO);
		startService(intent);
	}
	
	private static final int DIALOG_GETPASSWORD = 101;
    protected Dialog onCreateDialog(int id) {
        switch (id) {
        case DIALOG_GETPASSWORD:
            return getpasswordDialog();
        }
        
        return null;
    }
	
	private Dialog getpasswordDialog(){
    	return new AlertDialog.Builder(LoginActivity.this)
         .setIcon(R.drawable.dialog_question)
         .setTitle(R.string.dialog_get_password_toast)
         .setPositiveButton(R.string.dialog_ok, new DialogInterface.OnClickListener() {
             public void onClick(DialogInterface dialog, int whichButton) {
            	 getPassword();
             }
         })
         .setNegativeButton(R.string.dialog_cancel, new DialogInterface.OnClickListener() {
             public void onClick(DialogInterface dialog, int whichButton) {
             }
         })
         .create();
    }

	public void afterTextChanged(Editable arg0) {
	} 

	public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
			int arg3) {
		
	}
	private String[] mailSuffix = new String[QiupuConfig.mailSuf.length];
	public void onTextChanged(CharSequence arg0, int arg1, int arg2, int arg3) {
		String str = login_username_edt.getText().toString();
		int len = str.length();
		int size = QiupuConfig.mailSuf.length;
		Log.d(TAG, "len: "+len);
		if(str.indexOf("@")==str.lastIndexOf("@")){
			if(len > 0 && str.charAt(len - 1)=='@'){
				Log.d(TAG, "str: "+str.charAt(len - 1));
				login_username_edt.setThreshold(len + 1);
				for(int i = 0;i <size ; i++){
					mailSuffix[i] = str + QiupuConfig.mailSuf[i];
				}
				adapter = new ArrayAdapter<String>(this,android.R.layout.simple_dropdown_item_1line,mailSuffix);
				login_username_edt.setAdapter(adapter);
			}
		}
	}
}
